{"version":3,"file":"react-use-googlelogin.esm.js","sources":["../node_modules/babel-plugin-transform-async-to-promises/helpers.js","../src/useExternalScript.ts","../src/constants.ts","../src/index.tsx"],"sourcesContent":["// A type of promise-like that resolves synchronously and supports only one observer\nexport const _Pact = /*#__PURE__*/(function() {\n\tfunction _Pact() {}\n\t_Pact.prototype.then = function(onFulfilled, onRejected) {\n\t\tconst result = new _Pact();\n\t\tconst state = this.s;\n\t\tif (state) {\n\t\t\tconst callback = state & 1 ? onFulfilled : onRejected;\n\t\t\tif (callback) {\n\t\t\t\ttry {\n\t\t\t\t\t_settle(result, 1, callback(this.v));\n\t\t\t\t} catch (e) {\n\t\t\t\t\t_settle(result, 2, e);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t} else {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t\tthis.o = function(_this) {\n\t\t\ttry {\n\t\t\t\tconst value = _this.v;\n\t\t\t\tif (_this.s & 1) {\n\t\t\t\t\t_settle(result, 1, onFulfilled ? onFulfilled(value) : value);\n\t\t\t\t} else if (onRejected) {\n\t\t\t\t\t_settle(result, 1, onRejected(value));\n\t\t\t\t} else {\n\t\t\t\t\t_settle(result, 2, value);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(result, 2, e);\n\t\t\t}\n\t\t};\n\t\treturn result;\n\t}\n\treturn _Pact;\n})();\n\n// Settles a pact synchronously\nexport function _settle(pact, state, value) {\n\tif (!pact.s) {\n\t\tif (value instanceof _Pact) {\n\t\t\tif (value.s) {\n\t\t\t\tif (state & 1) {\n\t\t\t\t\tstate = value.s;\n\t\t\t\t}\n\t\t\t\tvalue = value.v;\n\t\t\t} else {\n\t\t\t\tvalue.o = _settle.bind(null, pact, state);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (value && value.then) {\n\t\t\tvalue.then(_settle.bind(null, pact, state), _settle.bind(null, pact, 2));\n\t\t\treturn;\n\t\t}\n\t\tpact.s = state;\n\t\tpact.v = value;\n\t\tconst observer = pact.o;\n\t\tif (observer) {\n\t\t\tobserver(pact);\n\t\t}\n\t}\n}\n\nexport function _isSettledPact(thenable) {\n\treturn thenable instanceof _Pact && thenable.s & 1;\n}\n\n// Converts argument to a function that always returns a Promise\nexport function _async(f) {\n\treturn function() {\n\t\tfor (var args = [], i = 0; i < arguments.length; i++) {\n\t\t\targs[i] = arguments[i];\n\t\t}\n\t\ttry {\n\t\t\treturn Promise.resolve(f.apply(this, args));\n\t\t} catch(e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n}\n\n// Awaits on a value that may or may not be a Promise (equivalent to the await keyword in ES2015, with continuations passed explicitly)\nexport function _await(value, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(value) : value;\n\t}\n\tif (!value || !value.then) {\n\t\tvalue = Promise.resolve(value);\n\t}\n\treturn then ? value.then(then) : value;\n}\n\n// Awaits on a value that may or may not be a Promise, then ignores it\nexport function _awaitIgnored(value, direct) {\n\tif (!direct) {\n\t\treturn value && value.then ? value.then(_empty) : Promise.resolve();\n\t}\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continue(value, then) {\n\treturn value && value.then ? value.then(then) : then(value);\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continueIgnored(value) {\n\tif (value && value.then) {\n\t\treturn value.then(_empty);\n\t}\n}\n\n// Asynchronously iterate through an object that has a length property, passing the index as the first argument to the callback (even as the length property changes)\nexport function _forTo(array, body, check) {\n\tvar i = -1, pact, reject;\n\tfunction _cycle(result) {\n\t\ttry {\n\t\t\twhile (++i < array.length && (!check || !check())) {\n\t\t\t\tresult = body(i);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pact) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t} else {\n\t\t\t\tpact = result;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t}\n\t}\n\t_cycle();\n\treturn pact;\n}\n\n// Asynchronously iterate through an object's properties (including properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forIn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tkeys.push(key);\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\n// Asynchronously iterate through an object's own properties (excluding properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forOwn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tif (Object.prototype.hasOwnProperty.call(target, key)) {\n\t\t\tkeys.push(key);\n\t\t}\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\nexport const _iteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.iterator || (Symbol.iterator = Symbol(\"Symbol.iterator\"))) : \"@@iterator\";\n\n// Asynchronously iterate through an object's values\n// Uses for...of if the runtime supports it, otherwise iterates until length on a copy\nexport function _forOf(target, body, check) {\n\tif (typeof target[_iteratorSymbol] === \"function\") {\n\t\tvar iterator = target[_iteratorSymbol](), step, pact, reject;\n\t\tfunction _cycle(result) {\n\t\t\ttry {\n\t\t\t\twhile (!(step = iterator.next()).done && (!check || !check())) {\n\t\t\t\t\tresult = body(step.value);\n\t\t\t\t\tif (result && result.then) {\n\t\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (pact) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t} else {\n\t\t\t\t\tpact = result;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t\t}\n\t\t}\n\t\t_cycle();\n\t\tif (iterator.return) {\n\t\t\tvar _fixup = function(value) {\n\t\t\t\ttry {\n\t\t\t\t\tif (!step.done) {\n\t\t\t\t\t\titerator.return();\n\t\t\t\t\t}\n\t\t\t\t} catch(e) {\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\t\t\tif (pact && pact.then) {\n\t\t\t\treturn pact.then(_fixup, function(e) {\n\t\t\t\t\tthrow _fixup(e);\n\t\t\t\t});\n\t\t\t}\n\t\t\t_fixup();\n\t\t}\n\t\treturn pact;\n\t}\n\t// No support for Symbol.iterator\n\tif (!(\"length\" in target)) {\n\t\tthrow new TypeError(\"Object is not iterable\");\n\t}\n\t// Handle live collections properly\n\tvar values = [];\n\tfor (var i = 0; i < target.length; i++) {\n\t\tvalues.push(target[i]);\n\t}\n\treturn _forTo(values, function(i) { return body(values[i]); }, check);\n}\n\nexport const _asyncIteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.asyncIterator || (Symbol.asyncIterator = Symbol(\"Symbol.asyncIterator\"))) : \"@@asyncIterator\";\n\n// Asynchronously iterate on a value using it's async iterator if present, or its synchronous iterator if missing\nexport function _forAwaitOf(target, body, check) {\n\tif (typeof target[_asyncIteratorSymbol] === \"function\") {\n\t\tvar pact = new _Pact();\n\t\tvar iterator = target[_asyncIteratorSymbol]();\n\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\treturn pact;\n\t\tfunction _resumeAfterBody(result) {\n\t\t\tif (check && !check()) {\n\t\t\t\treturn _settle(pact, 1, iterator.return ? iterator.return().then(function() { return result; }) : result);\n\t\t\t}\n\t\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\t}\n\t\tfunction _resumeAfterNext(step) {\n\t\t\tif (step.done) {\n\t\t\t\t_settle(pact, 1);\n\t\t\t} else {\n\t\t\t\tPromise.resolve(body(step.value)).then(_resumeAfterBody).then(void 0, _reject);\n\t\t\t}\n\t\t}\n\t\tfunction _reject(error) {\n\t\t\t_settle(pact, 2, iterator.return ? iterator.return().then(function() { return error; }) : error);\n\t\t}\n\t}\n\treturn Promise.resolve(_forOf(target, function(value) { return Promise.resolve(value).then(body); }, check));\n}\n\n// Asynchronously implement a generic for loop\nexport function _for(test, update, body) {\n\tvar stage;\n\tfor (;;) {\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t\tif (shouldContinue.then) {\n\t\t\tstage = 0;\n\t\t\tbreak;\n\t\t}\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.s;\n\t\t\t} else {\n\t\t\t\tstage = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (update) {\n\t\t\tvar updateValue = update();\n\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\tstage = 2;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tvar pact = new _Pact();\n\tvar reject = _settle.bind(null, pact, 2);\n\t(stage === 0 ? shouldContinue.then(_resumeAfterTest) : stage === 1 ? result.then(_resumeAfterBody) : updateValue.then(_resumeAfterUpdate)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tdo {\n\t\t\tif (update) {\n\t\t\t\tupdateValue = update();\n\t\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\t\tupdateValue.then(_resumeAfterUpdate).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tshouldContinue = test();\n\t\t\tif (!shouldContinue || (_isSettledPact(shouldContinue) && !shouldContinue.v)) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t}\n\t\t} while (!result || !result.then);\n\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterBody(result);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n\tfunction _resumeAfterUpdate() {\n\t\tif (shouldContinue = test()) {\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterTest(shouldContinue);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a do ... while loop\nexport function _do(body, test) {\n\tvar awaitBody;\n\tdo {\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t} else {\n\t\t\t\tawaitBody = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t} while (!shouldContinue.then);\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : shouldContinue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tfor (;;) {\n\t\t\tshouldContinue = test();\n\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t}\n\t\t\tif (!shouldContinue) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\tresult = result.v;\n\t\t\t\t} else {\n\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tdo {\n\t\t\t\tresult = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tshouldContinue = test();\n\t\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t\t}\n\t\t\t\tif (!shouldContinue) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} while (!shouldContinue.then);\n\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a switch statement\nexport function _switch(discriminant, cases) {\n\tvar dispatchIndex = -1;\n\tvar awaitBody;\n\touter: {\n\t\tfor (var i = 0; i < cases.length; i++) {\n\t\t\tvar test = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvar testValue = test();\n\t\t\t\tif (testValue && testValue.then) {\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tif (testValue === discriminant) {\n\t\t\t\t\tdispatchIndex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Found the default case, set it as the pending dispatch case\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tif (dispatchIndex !== -1) {\n\t\t\tdo {\n\t\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\t\twhile (!body) {\n\t\t\t\t\tdispatchIndex++;\n\t\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t\t}\n\t\t\t\tvar result = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tawaitBody = true;\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\t\tdispatchIndex++;\n\t\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t\treturn result;\n\t\t}\n\t}\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : testValue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterTest(value) {\n\t\tfor (;;) {\n\t\t\tif (value === discriminant) {\n\t\t\t\tdispatchIndex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (++i === cases.length) {\n\t\t\t\tif (dispatchIndex !== -1) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttest = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvalue = test();\n\t\t\t\tif (value && value.then) {\n\t\t\t\t\tvalue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tdo {\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tvar result = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tdispatchIndex++;\n\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterBody(result) {\n\t\tfor (;;) {\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tif (!fallthroughCheck || fallthroughCheck()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdispatchIndex++;\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _call(body, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(body()) : body();\n\t}\n\ttry {\n\t\tvar result = Promise.resolve(body());\n\t\treturn then ? result.then(then) : result;\n\t} catch (e) {\n\t\treturn Promise.reject(e);\n\t}\n}\n\n// Asynchronously call a function and swallow the result\nexport function _callIgnored(body, direct) {\n\treturn _call(body, _empty, direct);\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _invoke(body, then) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(then);\n\t}\n\treturn then(result);\n}\n\n// Asynchronously call a function and swallow the result\nexport function _invokeIgnored(body) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(_empty);\n\t}\n}\n\n// Asynchronously call a function and send errors to recovery continuation\nexport function _catch(body, recover) {\n\ttry {\n\t\tvar result = body();\n\t} catch(e) {\n\t\treturn recover(e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(void 0, recover);\n\t}\n\treturn result;\n}\n\n// Asynchronously await a promise and pass the result to a finally continuation\nexport function _finallyRethrows(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer(true, e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer.bind(null, false), finalizer.bind(null, true));\n\t}\n\treturn finalizer(false, value);\n}\n\n// Asynchronously await a promise and invoke a finally continuation that always overrides the result\nexport function _finally(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer();\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer, finalizer);\n\t}\n\treturn finalizer();\n}\n\n// Rethrow or return a value from a finally continuation\nexport function _rethrow(thrown, value) {\n\tif (thrown)\n\t\tthrow value;\n\treturn value;\n}\n\n// Empty function to implement break and other control flow that ignores asynchronous results\nexport function _empty() {\n}\n\n// Sentinel value for early returns in generators \nexport const _earlyReturn = /*#__PURE__*/ {};\n\n// Asynchronously call a function and send errors to recovery continuation, skipping early returns\nexport function _catchInGenerator(body, recover) {\n\treturn _catch(body, function(e) {\n\t\tif (e === _earlyReturn) {\n\t\t\tthrow e;\n\t\t}\n\t\treturn recover(e);\n\t});\n}\n\n// Asynchronous generator class; accepts the entrypoint of the generator, to which it passes itself when the generator should start\nexport const _AsyncGenerator = /*#__PURE__*/(function() {\n\tfunction _AsyncGenerator(entry) {\n\t\tthis._entry = entry;\n\t\tthis._pact = null;\n\t\tthis._resolve = null;\n\t\tthis._return = null;\n\t\tthis._promise = null;\n\t}\n\n\tfunction _wrapReturnedValue(value) {\n\t\treturn { value: value, done: true };\n\t}\n\tfunction _wrapYieldedValue(value) {\n\t\treturn { value: value, done: false };\n\t}\n\n\t_AsyncGenerator.prototype._yield = function(value) {\n\t\t// Yield the value to the pending next call\n\t\tthis._resolve(value && value.then ? value.then(_wrapYieldedValue) : _wrapYieldedValue(value));\n\t\t// Return a pact for an upcoming next/return/throw call\n\t\treturn this._pact = new _Pact();\n\t};\n\t_AsyncGenerator.prototype.next = function(value) {\n\t\t// Advance the generator, starting it if it has yet to be started\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tconst _entry = _this._entry;\n\t\t\t\tif (_entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the next call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Start the generator\n\t\t\t\t_this._entry = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\tfunction returnValue(value) {\n\t\t\t\t\t_this._resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t_this._resolve = null;\n\t\t\t\t}\n\t\t\t\t_entry(_this).then(returnValue, function(error) {\n\t\t\t\t\tif (error === _earlyReturn) {\n\t\t\t\t\t\treturnValue(_this._return);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst pact = new _Pact();\n\t\t\t\t\t\t_this._resolve(pact);\n\t\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t\t_this._resolve = null;\n\t\t\t\t\t\t_resolve(pact, 2, error);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Generator is started and a yield expression is pending, settle it\n\t\t\t\t_this._pact = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\t_settle(_pact, 1, value);\n\t\t\t}\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.return = function(value) {\n\t\t// Early return from the generator if started, otherwise abandons the generator\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the return call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return the specified value\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t}\n\t\t\t// Settle the yield expression with a rejected \"early return\" value\n\t\t\t_this._return = value;\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, _earlyReturn);\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.throw = function(error) {\n\t\t// Inject an exception into the pending yield expression\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve, reject) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the throw call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return a rejected Promise containing the error\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn reject(error);\n\t\t\t}\n\t\t\t// Settle the yield expression with the value as a rejection\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, error);\n\t\t});\n\t};\n\n\t_AsyncGenerator.prototype[_asyncIteratorSymbol] = function() {\n\t\treturn this;\n\t};\n\t\n\treturn _AsyncGenerator;\n})();\n","import { useEffect } from 'react'\r\n\r\n/**\r\n * Loads an internal script into a tag under the provided `id`. Useful for libraries\r\n * such as Stripe checkout and Google maps.\r\n * @private\r\n *\r\n * @param id - ID to give the created DOM node.\r\n * @param src - URL to load the script from.\r\n * @param callback - Callback to run when the script is loaded.\r\n */\r\nexport const useExternalScript = (\r\n  id: string,\r\n  src: string,\r\n  callback: () => void\r\n) => {\r\n  useEffect(() => {\r\n    const isLoaded = Boolean(document.getElementById(id))\r\n    if (isLoaded) return\r\n\r\n    const script = document.createElement('script')\r\n    script.src = src\r\n    script.id = id\r\n\r\n    document.body.appendChild(script)\r\n\r\n    if (callback) script.onload = callback\r\n    if (isLoaded && callback) callback()\r\n    // We're missing deps here, but we really only want to call this once.\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [])\r\n}\r\n","export const GOOGLE_API_URL = 'https://apis.google.com/js/api.js'\r\nexport const DOM_ID = '___GOOGLE_LOGIN___'\r\n","import { useState, useRef } from 'react'\r\n\r\nimport { useExternalScript } from './useExternalScript'\r\nimport { DOM_ID, GOOGLE_API_URL } from './constants'\r\nimport {\r\n  GoogleUser,\r\n  HookConfig,\r\n  HookState,\r\n  HookReturnValue,\r\n  TokenObj,\r\n} from './types'\r\n\r\nexport type GoogleLoginHookReturnValue = HookReturnValue\r\n\r\n/**\r\n * Retrieves basic profile information for a given user.\r\n * @private\r\n *\r\n * @param user - `GoogleUser` instance to get basic info on.\r\n */\r\nconst getAdditionalUserData = (\r\n  user: GoogleUser,\r\n  fetchBasicProfile: boolean\r\n) => {\r\n  const authResponse = user.getAuthResponse()\r\n\r\n  user.tokenObj = authResponse\r\n  user.tokenId = authResponse.id_token\r\n  user.accessToken = authResponse.access_token\r\n  user.expiresAt = authResponse.expires_at\r\n\r\n  if (!fetchBasicProfile) return\r\n\r\n  const basicProfile = user.getBasicProfile()\r\n\r\n  user.googleId = basicProfile.getId()\r\n  user.profileObj = {\r\n    googleId: basicProfile.getId(),\r\n    imageUrl: basicProfile.getImageUrl(),\r\n    email: basicProfile.getEmail(),\r\n    name: basicProfile.getName(),\r\n    givenName: basicProfile.getGivenName(),\r\n    familyName: basicProfile.getFamilyName(),\r\n  }\r\n}\r\n\r\n/**\r\n * React hook for working with the google oAuth client library.\r\n *\r\n * @param config - The configuration for your Google authentication flow.\r\n *\r\n * @returns The `GoogleUser` instance with properties to work with Google\r\n * client authentication.\r\n */\r\nexport const useGoogleLogin = ({\r\n  clientId,\r\n  hostedDomain,\r\n  redirectUri,\r\n  scope = 'profile email openid',\r\n  cookiePolicy = 'single_host_origin',\r\n  fetchBasicProfile = true,\r\n  uxMode = 'popup',\r\n  persist = true,\r\n}: HookConfig): HookReturnValue => {\r\n  if (!clientId) throw new Error('clientId is required.')\r\n\r\n  const [state, setState] = useState<HookState>({\r\n    googleUser: undefined,\r\n    auth2: undefined,\r\n    isSignedIn: false,\r\n    isInitialized: false,\r\n  })\r\n  const latestAccessTokenRef = useRef<string | undefined>(undefined)\r\n  const latestExpiresAtRef = useRef<number | undefined>(undefined)\r\n\r\n  /**\r\n   * Attempts to sign in a user with Google's oAuth2 client.\r\n   * @public\r\n   *\r\n   * @param options - Configutation parameters for GoogleAuth.signIn()\r\n   * @returns The GoogleUser instance for the signed in user.\r\n   */\r\n  const signIn = async (\r\n    options?: gapi.auth2.SigninOptions\r\n  ): Promise<GoogleUser | undefined> => {\r\n    const auth2 = window.gapi.auth2.getAuthInstance()\r\n\r\n    try {\r\n      const googleUser = await auth2.signIn(options)\r\n      getAdditionalUserData(googleUser, fetchBasicProfile)\r\n\r\n      return googleUser\r\n    } catch (err) {\r\n      if (__DEV__)\r\n        console.error('Received error when signing in: ' + err?.details)\r\n      return\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Signs out and disconnects the oAuth2 client. Sets `googleUser` to undefined.\r\n   * @public\r\n   *\r\n   * @returns `true` if successful, `false` otherwise.\r\n   */\r\n  const signOut = async (): Promise<boolean> => {\r\n    const auth2 = window.gapi.auth2.getAuthInstance()\r\n\r\n    if (!auth2) return false\r\n\r\n    await auth2.signOut()\r\n    auth2.disconnect()\r\n\r\n    return true\r\n  }\r\n\r\n  /**\r\n   * Attempts to get permission from the user to access the specified `scopes` offline.\r\n   * If the user grants access, this function will return the `authorizationCode` that\r\n   * can be exchanged for a `refreshToken` on your own server or backend service.\r\n   * @public\r\n   *\r\n   * @remarks\r\n   * You must sign in a user with this function in order to retain access for longer\r\n   * than 1 hour.\r\n   *\r\n   * @param options - Configuration options for granting offline access.\r\n   * @returns The authorization `code` if permission was granted, `undefined` otherwise.\r\n   */\r\n  const grantOfflineAccess = async (\r\n    options?: gapi.auth2.OfflineAccessOptions\r\n  ): Promise<string | undefined> => {\r\n    const auth2 = window.gapi.auth2.getAuthInstance()\r\n\r\n    try {\r\n      const { code } = await auth2.grantOfflineAccess(options)\r\n\r\n      return code\r\n    } catch (err) {\r\n      if (__DEV__)\r\n        console.error(\r\n          'Received error when granting offline access: ' + err?.details\r\n        )\r\n      return\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Refreshes the current logged in user's `accessToken`.\r\n   *\r\n   * @remarks\r\n   * To use this function, the user must have signed in via `grantOfflineAccess`.\r\n   *\r\n   * @returns An object containing the new `accessToken` and its corresponding\r\n   * `expiresAt`.\r\n   */\r\n  const refreshUser = async (): Promise<TokenObj | undefined> => {\r\n    try {\r\n      const auth2 = window.gapi.auth2.getAuthInstance()\r\n      const googleUser = auth2.currentUser.get()\r\n\r\n      const tokenObj = await googleUser?.reloadAuthResponse()\r\n      if (!tokenObj) {\r\n        if (__DEV__)\r\n          console.error('Something went wrong refreshing the current user.')\r\n\r\n        return\r\n      }\r\n\r\n      latestAccessTokenRef.current = tokenObj.access_token\r\n      latestExpiresAtRef.current = tokenObj.expires_at\r\n\r\n      return {\r\n        accessToken: tokenObj.access_token,\r\n        expiresAt: tokenObj.expires_at,\r\n      }\r\n    } catch (err) {\r\n      if (__DEV__)\r\n        console.error('Received error when refreshing tokens: ' + err?.details)\r\n      return\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Callback function passed to Google's auth listener. This is the primary\r\n   * mechanism to keep the hook's state/return values in sync with Google's\r\n   * window `gapi` objects. All stateful logic **should** be performed in\r\n   * here.\r\n   * @private\r\n   *\r\n   * @remarks\r\n   * Due to the way closures work, we cannot access `state` directly\r\n   * in this function. (yay stale closures) Normally we'd instantiate and\r\n   * disconnect the listener on every render so we have the correct `state`\r\n   * values but Google doesn't provide a way to disconnect their listener. Go figure.\r\n   *\r\n   * This function **also** may not be called with the most up-to-date `GoogleUser`.\r\n   * Google decided that `reloadAuthResponse` will invoke this listener, but not\r\n   * actually provide a `googleUser` object with the most up-to-date tokens.\r\n   * In most auth change scenarios this isn't an issue except when refreshing\r\n   * with `refreshUser`.\r\n   *\r\n   * To remedy this, we need to keep a ref that tracks the latest `accessToken`\r\n   * and `expiresAt` values whenever we refresh, and use those instead when they're\r\n   * available since they'll contain the up-to-date values.\r\n   *\r\n   * It's worth noting that we could just use the callback version `setState` here,\r\n   * and update state in `refreshUser`, but this causes causes an additional re-render\r\n   * by setting state twice. React's batching **could* help here, but it is pretty\r\n   * un-deterministic and in my testing wouldn't kick in this particular case.\r\n   *\r\n   * @param googleUser GoogleUser object from the `currentUser` property.\r\n   */\r\n  const handleAuthChange = (googleUser: GoogleUser) => {\r\n    const isSignedIn = googleUser.isSignedIn()\r\n    const auth2 = window.gapi.auth2.getAuthInstance()\r\n\r\n    // If `tokenId` is present, we've already performed this step so skip it.\r\n    if (isSignedIn && !googleUser.tokenId)\r\n      getAdditionalUserData(googleUser, fetchBasicProfile)\r\n\r\n    setState({\r\n      auth2,\r\n      googleUser: isSignedIn\r\n        ? {\r\n            ...googleUser,\r\n            accessToken: latestAccessTokenRef.current ?? googleUser.accessToken,\r\n            expiresAt: latestExpiresAtRef.current ?? googleUser.expiresAt,\r\n            tokenObj: {\r\n              ...(googleUser.tokenObj as gapi.auth2.AuthResponse),\r\n              access_token:\r\n                latestAccessTokenRef.current ??\r\n                googleUser.tokenObj!.access_token,\r\n              expires_at:\r\n                latestExpiresAtRef.current ?? googleUser.tokenObj!.expires_at,\r\n            },\r\n          }\r\n        : undefined,\r\n      isSignedIn,\r\n      isInitialized: true,\r\n    })\r\n  }\r\n\r\n  useExternalScript(DOM_ID, GOOGLE_API_URL, () => {\r\n    const config: gapi.auth2.ClientConfig = {\r\n      client_id: clientId,\r\n      cookie_policy: cookiePolicy,\r\n      hosted_domain: hostedDomain,\r\n      fetch_basic_profile: fetchBasicProfile,\r\n      ux_mode: uxMode,\r\n      redirect_uri: redirectUri,\r\n      scope,\r\n    }\r\n\r\n    /**\r\n     * According to Google's documentation:\r\n     *\r\n     * Warning: do not call Promise.resolve() or similar with the result of gapi.auth2.init().\r\n     * The GoogleAuth object returned implements the `then()` method which resolves with itself.\r\n     * As a result, `Promise.resolve()` or `await` will cause infinite recursion.\r\n     */\r\n    const handleLoad = () => {\r\n      window.gapi.auth2.init(config).then(auth2 => {\r\n        const googleUser = auth2.currentUser.get()\r\n        const isSignedIn = googleUser.isSignedIn()\r\n        auth2.currentUser.listen(handleAuthChange)\r\n\r\n        if (!persist) {\r\n          signOut()\r\n          return\r\n        }\r\n\r\n        if (isSignedIn) getAdditionalUserData(googleUser, fetchBasicProfile)\r\n        setState({ googleUser, auth2, isSignedIn, isInitialized: true })\r\n      })\r\n    }\r\n\r\n    window.gapi.load('auth2', handleLoad)\r\n  })\r\n\r\n  return {\r\n    ...state,\r\n    signIn,\r\n    signOut,\r\n    grantOfflineAccess,\r\n    refreshUser,\r\n  }\r\n}\r\n"],"names":["useExternalScript","id","src","callback","useEffect","isLoaded","Boolean","document","getElementById","script","createElement","body","appendChild","onload","GOOGLE_API_URL","DOM_ID","getAdditionalUserData","user","fetchBasicProfile","authResponse","getAuthResponse","tokenObj","tokenId","id_token","accessToken","access_token","expiresAt","expires_at","basicProfile","getBasicProfile","googleId","getId","profileObj","imageUrl","getImageUrl","email","getEmail","name","getName","givenName","getGivenName","familyName","getFamilyName","useGoogleLogin","clientId","hostedDomain","redirectUri","scope","cookiePolicy","uxMode","persist","Error","useState","googleUser","undefined","auth2","isSignedIn","isInitialized","state","setState","latestAccessTokenRef","useRef","latestExpiresAtRef","signIn","options","window","gapi","getAuthInstance","err","console","error","details","signOut","disconnect","grantOfflineAccess","code","refreshUser","currentUser","get","reloadAuthResponse","current","handleAuthChange","config","client_id","cookie_policy","hosted_domain","fetch_basic_profile","ux_mode","redirect_uri","handleLoad","init","then","listen","load"],"mappings":"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"}