{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar react = require('react');\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n} // A type of promise-like that resolves synchronously and supports only one observer\n\n\nconst _iteratorSymbol = /*#__PURE__*/typeof Symbol !== \"undefined\" ? Symbol.iterator || (Symbol.iterator = Symbol(\"Symbol.iterator\")) : \"@@iterator\";\n\nconst _asyncIteratorSymbol = /*#__PURE__*/typeof Symbol !== \"undefined\" ? Symbol.asyncIterator || (Symbol.asyncIterator = Symbol(\"Symbol.asyncIterator\")) : \"@@asyncIterator\"; // Asynchronously call a function and send errors to recovery continuation\n\n\nfunction _catch(body, recover) {\n  try {\n    var result = body();\n  } catch (e) {\n    return recover(e);\n  }\n\n  if (result && result.then) {\n    return result.then(void 0, recover);\n  }\n\n  return result;\n}\n/**\r\n * Loads an internal script into a tag under the provided `id`. Useful for libraries\r\n * such as Stripe checkout and Google maps.\r\n * @private\r\n *\r\n * @param id - ID to give the created DOM node.\r\n * @param src - URL to load the script from.\r\n * @param callback - Callback to run when the script is loaded.\r\n */\n\n\nvar useExternalScript = function useExternalScript(id, src, callback) {\n  react.useEffect(function () {\n    var isLoaded = Boolean(document.getElementById(id));\n    if (isLoaded) return;\n    var script = document.createElement('script');\n    script.src = src;\n    script.id = id;\n    document.body.appendChild(script);\n    if (callback) script.onload = callback;\n    if (isLoaded && callback) callback(); // We're missing deps here, but we really only want to call this once.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n};\n\nvar GOOGLE_API_URL = 'https://apis.google.com/js/api.js';\nvar DOM_ID = '___GOOGLE_LOGIN___';\n/**\r\n * Retrieves basic profile information for a given user.\r\n * @private\r\n *\r\n * @param user - `GoogleUser` instance to get basic info on.\r\n */\n\nvar getAdditionalUserData = function getAdditionalUserData(user, fetchBasicProfile) {\n  var authResponse = user.getAuthResponse();\n  user.tokenObj = authResponse;\n  user.tokenId = authResponse.id_token;\n  user.accessToken = authResponse.access_token;\n  user.expiresAt = authResponse.expires_at;\n  if (!fetchBasicProfile) return;\n  var basicProfile = user.getBasicProfile();\n  user.googleId = basicProfile.getId();\n  user.profileObj = {\n    googleId: basicProfile.getId(),\n    imageUrl: basicProfile.getImageUrl(),\n    email: basicProfile.getEmail(),\n    name: basicProfile.getName(),\n    givenName: basicProfile.getGivenName(),\n    familyName: basicProfile.getFamilyName()\n  };\n};\n/**\r\n * React hook for working with the google oAuth client library.\r\n *\r\n * @param config - The configuration for your Google authentication flow.\r\n *\r\n * @returns The `GoogleUser` instance with properties to work with Google\r\n * client authentication.\r\n */\n\n\nvar useGoogleLogin = function useGoogleLogin(_ref) {\n  var clientId = _ref.clientId,\n      hostedDomain = _ref.hostedDomain,\n      redirectUri = _ref.redirectUri,\n      _ref$scope = _ref.scope,\n      scope = _ref$scope === void 0 ? 'profile email openid' : _ref$scope,\n      _ref$cookiePolicy = _ref.cookiePolicy,\n      cookiePolicy = _ref$cookiePolicy === void 0 ? 'single_host_origin' : _ref$cookiePolicy,\n      _ref$fetchBasicProfil = _ref.fetchBasicProfile,\n      fetchBasicProfile = _ref$fetchBasicProfil === void 0 ? true : _ref$fetchBasicProfil,\n      _ref$uxMode = _ref.uxMode,\n      uxMode = _ref$uxMode === void 0 ? 'popup' : _ref$uxMode,\n      _ref$persist = _ref.persist,\n      persist = _ref$persist === void 0 ? true : _ref$persist;\n  if (!clientId) throw new Error('clientId is required.');\n\n  var _useState = react.useState({\n    googleUser: undefined,\n    auth2: undefined,\n    isSignedIn: false,\n    isInitialized: false\n  }),\n      state = _useState[0],\n      setState = _useState[1];\n\n  var latestAccessTokenRef = react.useRef(undefined);\n  var latestExpiresAtRef = react.useRef(undefined);\n  /**\r\n   * Attempts to sign in a user with Google's oAuth2 client.\r\n   * @public\r\n   *\r\n   * @param options - Configutation parameters for GoogleAuth.signIn()\r\n   * @returns The GoogleUser instance for the signed in user.\r\n   */\n\n  var signIn = function signIn(options) {\n    try {\n      var auth2 = window.gapi.auth2.getAuthInstance();\n      return Promise.resolve(_catch(function () {\n        return Promise.resolve(auth2.signIn(options)).then(function (googleUser) {\n          getAdditionalUserData(googleUser, fetchBasicProfile);\n          return googleUser;\n        });\n      }, function (err) {\n        if (\"development\" !== \"production\") console.error('Received error when signing in: ' + (err === null || err === void 0 ? void 0 : err.details));\n      }));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n  /**\r\n   * Signs out and disconnects the oAuth2 client. Sets `googleUser` to undefined.\r\n   * @public\r\n   *\r\n   * @returns `true` if successful, `false` otherwise.\r\n   */\n\n\n  var signOut = function signOut() {\n    try {\n      var auth2 = window.gapi.auth2.getAuthInstance();\n      if (!auth2) return Promise.resolve(false);\n      return Promise.resolve(auth2.signOut()).then(function () {\n        auth2.disconnect();\n        return true;\n      });\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n  /**\r\n   * Attempts to get permission from the user to access the specified `scopes` offline.\r\n   * If the user grants access, this function will return the `authorizationCode` that\r\n   * can be exchanged for a `refreshToken` on your own server or backend service.\r\n   * @public\r\n   *\r\n   * @remarks\r\n   * You must sign in a user with this function in order to retain access for longer\r\n   * than 1 hour.\r\n   *\r\n   * @param options - Configuration options for granting offline access.\r\n   * @returns The authorization `code` if permission was granted, `undefined` otherwise.\r\n   */\n\n\n  var grantOfflineAccess = function grantOfflineAccess(options) {\n    try {\n      var auth2 = window.gapi.auth2.getAuthInstance();\n      return Promise.resolve(_catch(function () {\n        return Promise.resolve(auth2.grantOfflineAccess(options)).then(function (_ref2) {\n          var code = _ref2.code;\n          return code;\n        });\n      }, function (err) {\n        if (\"development\" !== \"production\") console.error('Received error when granting offline access: ' + (err === null || err === void 0 ? void 0 : err.details));\n      }));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n  /**\r\n   * Refreshes the current logged in user's `accessToken`.\r\n   *\r\n   * @remarks\r\n   * To use this function, the user must have signed in via `grantOfflineAccess`.\r\n   *\r\n   * @returns An object containing the new `accessToken` and its corresponding\r\n   * `expiresAt`.\r\n   */\n\n\n  var refreshUser = function refreshUser() {\n    try {\n      return Promise.resolve(_catch(function () {\n        var auth2 = window.gapi.auth2.getAuthInstance();\n        var googleUser = auth2.currentUser.get();\n        return Promise.resolve(googleUser === null || googleUser === void 0 ? void 0 : googleUser.reloadAuthResponse()).then(function (tokenObj) {\n          if (!tokenObj) {\n            if (\"development\" !== \"production\") console.error('Something went wrong refreshing the current user.');\n            return;\n          }\n\n          latestAccessTokenRef.current = tokenObj.access_token;\n          latestExpiresAtRef.current = tokenObj.expires_at;\n          return {\n            accessToken: tokenObj.access_token,\n            expiresAt: tokenObj.expires_at\n          };\n        });\n      }, function (err) {\n        if (\"development\" !== \"production\") console.error('Received error when refreshing tokens: ' + (err === null || err === void 0 ? void 0 : err.details));\n      }));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n  /**\r\n   * Callback function passed to Google's auth listener. This is the primary\r\n   * mechanism to keep the hook's state/return values in sync with Google's\r\n   * window `gapi` objects. All stateful logic **should** be performed in\r\n   * here.\r\n   * @private\r\n   *\r\n   * @remarks\r\n   * Due to the way closures work, we cannot access `state` directly\r\n   * in this function. (yay stale closures) Normally we'd instantiate and\r\n   * disconnect the listener on every render so we have the correct `state`\r\n   * values but Google doesn't provide a way to disconnect their listener. Go figure.\r\n   *\r\n   * This function **also** may not be called with the most up-to-date `GoogleUser`.\r\n   * Google decided that `reloadAuthResponse` will invoke this listener, but not\r\n   * actually provide a `googleUser` object with the most up-to-date tokens.\r\n   * In most auth change scenarios this isn't an issue except when refreshing\r\n   * with `refreshUser`.\r\n   *\r\n   * To remedy this, we need to keep a ref that tracks the latest `accessToken`\r\n   * and `expiresAt` values whenever we refresh, and use those instead when they're\r\n   * available since they'll contain the up-to-date values.\r\n   *\r\n   * It's worth noting that we could just use the callback version `setState` here,\r\n   * and update state in `refreshUser`, but this causes causes an additional re-render\r\n   * by setting state twice. React's batching **could* help here, but it is pretty\r\n   * un-deterministic and in my testing wouldn't kick in this particular case.\r\n   *\r\n   * @param googleUser GoogleUser object from the `currentUser` property.\r\n   */\n\n\n  var handleAuthChange = function handleAuthChange(googleUser) {\n    var _latestAccessTokenRef, _latestExpiresAtRef$c, _latestAccessTokenRef2, _latestExpiresAtRef$c2;\n\n    var isSignedIn = googleUser.isSignedIn();\n    var auth2 = window.gapi.auth2.getAuthInstance(); // If `tokenId` is present, we've already performed this step so skip it.\n\n    if (isSignedIn && !googleUser.tokenId) getAdditionalUserData(googleUser, fetchBasicProfile);\n    setState({\n      auth2: auth2,\n      googleUser: isSignedIn ? _extends({}, googleUser, {\n        accessToken: (_latestAccessTokenRef = latestAccessTokenRef.current) !== null && _latestAccessTokenRef !== void 0 ? _latestAccessTokenRef : googleUser.accessToken,\n        expiresAt: (_latestExpiresAtRef$c = latestExpiresAtRef.current) !== null && _latestExpiresAtRef$c !== void 0 ? _latestExpiresAtRef$c : googleUser.expiresAt,\n        tokenObj: _extends({}, googleUser.tokenObj, {\n          access_token: (_latestAccessTokenRef2 = latestAccessTokenRef.current) !== null && _latestAccessTokenRef2 !== void 0 ? _latestAccessTokenRef2 : googleUser.tokenObj.access_token,\n          expires_at: (_latestExpiresAtRef$c2 = latestExpiresAtRef.current) !== null && _latestExpiresAtRef$c2 !== void 0 ? _latestExpiresAtRef$c2 : googleUser.tokenObj.expires_at\n        })\n      }) : undefined,\n      isSignedIn: isSignedIn,\n      isInitialized: true\n    });\n  };\n\n  useExternalScript(DOM_ID, GOOGLE_API_URL, function () {\n    var config = {\n      client_id: clientId,\n      cookie_policy: cookiePolicy,\n      hosted_domain: hostedDomain,\n      fetch_basic_profile: fetchBasicProfile,\n      ux_mode: uxMode,\n      redirect_uri: redirectUri,\n      scope: scope\n    };\n    /**\r\n     * According to Google's documentation:\r\n     *\r\n     * Warning: do not call Promise.resolve() or similar with the result of gapi.auth2.init().\r\n     * The GoogleAuth object returned implements the `then()` method which resolves with itself.\r\n     * As a result, `Promise.resolve()` or `await` will cause infinite recursion.\r\n     */\n\n    var handleLoad = function handleLoad() {\n      window.gapi.auth2.init(config).then(function (auth2) {\n        var googleUser = auth2.currentUser.get();\n        var isSignedIn = googleUser.isSignedIn();\n        auth2.currentUser.listen(handleAuthChange);\n\n        if (!persist) {\n          signOut();\n          return;\n        }\n\n        if (isSignedIn) getAdditionalUserData(googleUser, fetchBasicProfile);\n        setState({\n          googleUser: googleUser,\n          auth2: auth2,\n          isSignedIn: isSignedIn,\n          isInitialized: true\n        });\n      });\n    };\n\n    window.gapi.load('auth2', handleLoad);\n  });\n  return _extends({}, state, {\n    signIn: signIn,\n    signOut: signOut,\n    grantOfflineAccess: grantOfflineAccess,\n    refreshUser: refreshUser\n  });\n};\n\nexports.useGoogleLogin = useGoogleLogin;","map":{"version":3,"sources":["../node_modules/babel-plugin-transform-async-to-promises/helpers.js","../src/useExternalScript.ts","../src/constants.ts","../src/index.tsx"],"names":["useExternalScript","useEffect","isLoaded","Boolean","document","script","callback","GOOGLE_API_URL","DOM_ID","getAdditionalUserData","authResponse","user","basicProfile","googleId","imageUrl","email","name","givenName","familyName","useGoogleLogin","clientId","hostedDomain","redirectUri","scope","cookiePolicy","fetchBasicProfile","uxMode","persist","state","setState","useState","googleUser","auth2","isSignedIn","isInitialized","latestAccessTokenRef","useRef","latestExpiresAtRef","signIn","window","err","console","signOut","grantOfflineAccess","code","refreshUser","tokenObj","accessToken","expiresAt","expires_at","handleAuthChange","access_token","config","client_id","cookie_policy","hosted_domain","fetch_basic_profile","ux_mode","redirect_uri","handleLoad"],"mappings":"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","sourcesContent":["// A type of promise-like that resolves synchronously and supports only one observer\nexport const _Pact = /*#__PURE__*/(function() {\n\tfunction _Pact() {}\n\t_Pact.prototype.then = function(onFulfilled, onRejected) {\n\t\tconst result = new _Pact();\n\t\tconst state = this.s;\n\t\tif (state) {\n\t\t\tconst callback = state & 1 ? onFulfilled : onRejected;\n\t\t\tif (callback) {\n\t\t\t\ttry {\n\t\t\t\t\t_settle(result, 1, callback(this.v));\n\t\t\t\t} catch (e) {\n\t\t\t\t\t_settle(result, 2, e);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t} else {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t\tthis.o = function(_this) {\n\t\t\ttry {\n\t\t\t\tconst value = _this.v;\n\t\t\t\tif (_this.s & 1) {\n\t\t\t\t\t_settle(result, 1, onFulfilled ? onFulfilled(value) : value);\n\t\t\t\t} else if (onRejected) {\n\t\t\t\t\t_settle(result, 1, onRejected(value));\n\t\t\t\t} else {\n\t\t\t\t\t_settle(result, 2, value);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(result, 2, e);\n\t\t\t}\n\t\t};\n\t\treturn result;\n\t}\n\treturn _Pact;\n})();\n\n// Settles a pact synchronously\nexport function _settle(pact, state, value) {\n\tif (!pact.s) {\n\t\tif (value instanceof _Pact) {\n\t\t\tif (value.s) {\n\t\t\t\tif (state & 1) {\n\t\t\t\t\tstate = value.s;\n\t\t\t\t}\n\t\t\t\tvalue = value.v;\n\t\t\t} else {\n\t\t\t\tvalue.o = _settle.bind(null, pact, state);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (value && value.then) {\n\t\t\tvalue.then(_settle.bind(null, pact, state), _settle.bind(null, pact, 2));\n\t\t\treturn;\n\t\t}\n\t\tpact.s = state;\n\t\tpact.v = value;\n\t\tconst observer = pact.o;\n\t\tif (observer) {\n\t\t\tobserver(pact);\n\t\t}\n\t}\n}\n\nexport function _isSettledPact(thenable) {\n\treturn thenable instanceof _Pact && thenable.s & 1;\n}\n\n// Converts argument to a function that always returns a Promise\nexport function _async(f) {\n\treturn function() {\n\t\tfor (var args = [], i = 0; i < arguments.length; i++) {\n\t\t\targs[i] = arguments[i];\n\t\t}\n\t\ttry {\n\t\t\treturn Promise.resolve(f.apply(this, args));\n\t\t} catch(e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n}\n\n// Awaits on a value that may or may not be a Promise (equivalent to the await keyword in ES2015, with continuations passed explicitly)\nexport function _await(value, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(value) : value;\n\t}\n\tif (!value || !value.then) {\n\t\tvalue = Promise.resolve(value);\n\t}\n\treturn then ? value.then(then) : value;\n}\n\n// Awaits on a value that may or may not be a Promise, then ignores it\nexport function _awaitIgnored(value, direct) {\n\tif (!direct) {\n\t\treturn value && value.then ? value.then(_empty) : Promise.resolve();\n\t}\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continue(value, then) {\n\treturn value && value.then ? value.then(then) : then(value);\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continueIgnored(value) {\n\tif (value && value.then) {\n\t\treturn value.then(_empty);\n\t}\n}\n\n// Asynchronously iterate through an object that has a length property, passing the index as the first argument to the callback (even as the length property changes)\nexport function _forTo(array, body, check) {\n\tvar i = -1, pact, reject;\n\tfunction _cycle(result) {\n\t\ttry {\n\t\t\twhile (++i < array.length && (!check || !check())) {\n\t\t\t\tresult = body(i);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pact) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t} else {\n\t\t\t\tpact = result;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t}\n\t}\n\t_cycle();\n\treturn pact;\n}\n\n// Asynchronously iterate through an object's properties (including properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forIn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tkeys.push(key);\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\n// Asynchronously iterate through an object's own properties (excluding properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forOwn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tif (Object.prototype.hasOwnProperty.call(target, key)) {\n\t\t\tkeys.push(key);\n\t\t}\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\nexport const _iteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.iterator || (Symbol.iterator = Symbol(\"Symbol.iterator\"))) : \"@@iterator\";\n\n// Asynchronously iterate through an object's values\n// Uses for...of if the runtime supports it, otherwise iterates until length on a copy\nexport function _forOf(target, body, check) {\n\tif (typeof target[_iteratorSymbol] === \"function\") {\n\t\tvar iterator = target[_iteratorSymbol](), step, pact, reject;\n\t\tfunction _cycle(result) {\n\t\t\ttry {\n\t\t\t\twhile (!(step = iterator.next()).done && (!check || !check())) {\n\t\t\t\t\tresult = body(step.value);\n\t\t\t\t\tif (result && result.then) {\n\t\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (pact) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t} else {\n\t\t\t\t\tpact = result;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t\t}\n\t\t}\n\t\t_cycle();\n\t\tif (iterator.return) {\n\t\t\tvar _fixup = function(value) {\n\t\t\t\ttry {\n\t\t\t\t\tif (!step.done) {\n\t\t\t\t\t\titerator.return();\n\t\t\t\t\t}\n\t\t\t\t} catch(e) {\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\t\t\tif (pact && pact.then) {\n\t\t\t\treturn pact.then(_fixup, function(e) {\n\t\t\t\t\tthrow _fixup(e);\n\t\t\t\t});\n\t\t\t}\n\t\t\t_fixup();\n\t\t}\n\t\treturn pact;\n\t}\n\t// No support for Symbol.iterator\n\tif (!(\"length\" in target)) {\n\t\tthrow new TypeError(\"Object is not iterable\");\n\t}\n\t// Handle live collections properly\n\tvar values = [];\n\tfor (var i = 0; i < target.length; i++) {\n\t\tvalues.push(target[i]);\n\t}\n\treturn _forTo(values, function(i) { return body(values[i]); }, check);\n}\n\nexport const _asyncIteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.asyncIterator || (Symbol.asyncIterator = Symbol(\"Symbol.asyncIterator\"))) : \"@@asyncIterator\";\n\n// Asynchronously iterate on a value using it's async iterator if present, or its synchronous iterator if missing\nexport function _forAwaitOf(target, body, check) {\n\tif (typeof target[_asyncIteratorSymbol] === \"function\") {\n\t\tvar pact = new _Pact();\n\t\tvar iterator = target[_asyncIteratorSymbol]();\n\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\treturn pact;\n\t\tfunction _resumeAfterBody(result) {\n\t\t\tif (check && !check()) {\n\t\t\t\treturn _settle(pact, 1, iterator.return ? iterator.return().then(function() { return result; }) : result);\n\t\t\t}\n\t\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\t}\n\t\tfunction _resumeAfterNext(step) {\n\t\t\tif (step.done) {\n\t\t\t\t_settle(pact, 1);\n\t\t\t} else {\n\t\t\t\tPromise.resolve(body(step.value)).then(_resumeAfterBody).then(void 0, _reject);\n\t\t\t}\n\t\t}\n\t\tfunction _reject(error) {\n\t\t\t_settle(pact, 2, iterator.return ? iterator.return().then(function() { return error; }) : error);\n\t\t}\n\t}\n\treturn Promise.resolve(_forOf(target, function(value) { return Promise.resolve(value).then(body); }, check));\n}\n\n// Asynchronously implement a generic for loop\nexport function _for(test, update, body) {\n\tvar stage;\n\tfor (;;) {\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t\tif (shouldContinue.then) {\n\t\t\tstage = 0;\n\t\t\tbreak;\n\t\t}\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.s;\n\t\t\t} else {\n\t\t\t\tstage = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (update) {\n\t\t\tvar updateValue = update();\n\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\tstage = 2;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tvar pact = new _Pact();\n\tvar reject = _settle.bind(null, pact, 2);\n\t(stage === 0 ? shouldContinue.then(_resumeAfterTest) : stage === 1 ? result.then(_resumeAfterBody) : updateValue.then(_resumeAfterUpdate)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tdo {\n\t\t\tif (update) {\n\t\t\t\tupdateValue = update();\n\t\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\t\tupdateValue.then(_resumeAfterUpdate).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tshouldContinue = test();\n\t\t\tif (!shouldContinue || (_isSettledPact(shouldContinue) && !shouldContinue.v)) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t}\n\t\t} while (!result || !result.then);\n\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterBody(result);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n\tfunction _resumeAfterUpdate() {\n\t\tif (shouldContinue = test()) {\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterTest(shouldContinue);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a do ... while loop\nexport function _do(body, test) {\n\tvar awaitBody;\n\tdo {\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t} else {\n\t\t\t\tawaitBody = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t} while (!shouldContinue.then);\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : shouldContinue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tfor (;;) {\n\t\t\tshouldContinue = test();\n\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t}\n\t\t\tif (!shouldContinue) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\tresult = result.v;\n\t\t\t\t} else {\n\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tdo {\n\t\t\t\tresult = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tshouldContinue = test();\n\t\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t\t}\n\t\t\t\tif (!shouldContinue) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} while (!shouldContinue.then);\n\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a switch statement\nexport function _switch(discriminant, cases) {\n\tvar dispatchIndex = -1;\n\tvar awaitBody;\n\touter: {\n\t\tfor (var i = 0; i < cases.length; i++) {\n\t\t\tvar test = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvar testValue = test();\n\t\t\t\tif (testValue && testValue.then) {\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tif (testValue === discriminant) {\n\t\t\t\t\tdispatchIndex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Found the default case, set it as the pending dispatch case\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tif (dispatchIndex !== -1) {\n\t\t\tdo {\n\t\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\t\twhile (!body) {\n\t\t\t\t\tdispatchIndex++;\n\t\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t\t}\n\t\t\t\tvar result = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tawaitBody = true;\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\t\tdispatchIndex++;\n\t\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t\treturn result;\n\t\t}\n\t}\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : testValue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterTest(value) {\n\t\tfor (;;) {\n\t\t\tif (value === discriminant) {\n\t\t\t\tdispatchIndex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (++i === cases.length) {\n\t\t\t\tif (dispatchIndex !== -1) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttest = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvalue = test();\n\t\t\t\tif (value && value.then) {\n\t\t\t\t\tvalue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tdo {\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tvar result = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tdispatchIndex++;\n\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterBody(result) {\n\t\tfor (;;) {\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tif (!fallthroughCheck || fallthroughCheck()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdispatchIndex++;\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _call(body, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(body()) : body();\n\t}\n\ttry {\n\t\tvar result = Promise.resolve(body());\n\t\treturn then ? result.then(then) : result;\n\t} catch (e) {\n\t\treturn Promise.reject(e);\n\t}\n}\n\n// Asynchronously call a function and swallow the result\nexport function _callIgnored(body, direct) {\n\treturn _call(body, _empty, direct);\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _invoke(body, then) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(then);\n\t}\n\treturn then(result);\n}\n\n// Asynchronously call a function and swallow the result\nexport function _invokeIgnored(body) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(_empty);\n\t}\n}\n\n// Asynchronously call a function and send errors to recovery continuation\nexport function _catch(body, recover) {\n\ttry {\n\t\tvar result = body();\n\t} catch(e) {\n\t\treturn recover(e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(void 0, recover);\n\t}\n\treturn result;\n}\n\n// Asynchronously await a promise and pass the result to a finally continuation\nexport function _finallyRethrows(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer(true, e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer.bind(null, false), finalizer.bind(null, true));\n\t}\n\treturn finalizer(false, value);\n}\n\n// Asynchronously await a promise and invoke a finally continuation that always overrides the result\nexport function _finally(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer();\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer, finalizer);\n\t}\n\treturn finalizer();\n}\n\n// Rethrow or return a value from a finally continuation\nexport function _rethrow(thrown, value) {\n\tif (thrown)\n\t\tthrow value;\n\treturn value;\n}\n\n// Empty function to implement break and other control flow that ignores asynchronous results\nexport function _empty() {\n}\n\n// Sentinel value for early returns in generators \nexport const _earlyReturn = /*#__PURE__*/ {};\n\n// Asynchronously call a function and send errors to recovery continuation, skipping early returns\nexport function _catchInGenerator(body, recover) {\n\treturn _catch(body, function(e) {\n\t\tif (e === _earlyReturn) {\n\t\t\tthrow e;\n\t\t}\n\t\treturn recover(e);\n\t});\n}\n\n// Asynchronous generator class; accepts the entrypoint of the generator, to which it passes itself when the generator should start\nexport const _AsyncGenerator = /*#__PURE__*/(function() {\n\tfunction _AsyncGenerator(entry) {\n\t\tthis._entry = entry;\n\t\tthis._pact = null;\n\t\tthis._resolve = null;\n\t\tthis._return = null;\n\t\tthis._promise = null;\n\t}\n\n\tfunction _wrapReturnedValue(value) {\n\t\treturn { value: value, done: true };\n\t}\n\tfunction _wrapYieldedValue(value) {\n\t\treturn { value: value, done: false };\n\t}\n\n\t_AsyncGenerator.prototype._yield = function(value) {\n\t\t// Yield the value to the pending next call\n\t\tthis._resolve(value && value.then ? value.then(_wrapYieldedValue) : _wrapYieldedValue(value));\n\t\t// Return a pact for an upcoming next/return/throw call\n\t\treturn this._pact = new _Pact();\n\t};\n\t_AsyncGenerator.prototype.next = function(value) {\n\t\t// Advance the generator, starting it if it has yet to be started\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tconst _entry = _this._entry;\n\t\t\t\tif (_entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the next call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Start the generator\n\t\t\t\t_this._entry = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\tfunction returnValue(value) {\n\t\t\t\t\t_this._resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t_this._resolve = null;\n\t\t\t\t}\n\t\t\t\t_entry(_this).then(returnValue, function(error) {\n\t\t\t\t\tif (error === _earlyReturn) {\n\t\t\t\t\t\treturnValue(_this._return);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst pact = new _Pact();\n\t\t\t\t\t\t_this._resolve(pact);\n\t\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t\t_this._resolve = null;\n\t\t\t\t\t\t_resolve(pact, 2, error);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Generator is started and a yield expression is pending, settle it\n\t\t\t\t_this._pact = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\t_settle(_pact, 1, value);\n\t\t\t}\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.return = function(value) {\n\t\t// Early return from the generator if started, otherwise abandons the generator\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the return call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return the specified value\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t}\n\t\t\t// Settle the yield expression with a rejected \"early return\" value\n\t\t\t_this._return = value;\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, _earlyReturn);\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.throw = function(error) {\n\t\t// Inject an exception into the pending yield expression\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve, reject) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the throw call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return a rejected Promise containing the error\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn reject(error);\n\t\t\t}\n\t\t\t// Settle the yield expression with the value as a rejection\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, error);\n\t\t});\n\t};\n\n\t_AsyncGenerator.prototype[_asyncIteratorSymbol] = function() {\n\t\treturn this;\n\t};\n\t\n\treturn _AsyncGenerator;\n})();\n","import { useEffect } from 'react'\r\n\r\n/**\r\n * Loads an internal script into a tag under the provided `id`. Useful for libraries\r\n * such as Stripe checkout and Google maps.\r\n * @private\r\n *\r\n * @param id - ID to give the created DOM node.\r\n * @param src - URL to load the script from.\r\n * @param callback - Callback to run when the script is loaded.\r\n */\r\nexport const useExternalScript = (\r\n  id: string,\r\n  src: string,\r\n  callback: () => void\r\n) => {\r\n  useEffect(() => {\r\n    const isLoaded = Boolean(document.getElementById(id))\r\n    if (isLoaded) return\r\n\r\n    const script = document.createElement('script')\r\n    script.src = src\r\n    script.id = id\r\n\r\n    document.body.appendChild(script)\r\n\r\n    if (callback) script.onload = callback\r\n    if (isLoaded && callback) callback()\r\n    // We're missing deps here, but we really only want to call this once.\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [])\r\n}\r\n","export const GOOGLE_API_URL = 'https://apis.google.com/js/api.js'\r\nexport const DOM_ID = '___GOOGLE_LOGIN___'\r\n","import { useState, useRef } from 'react'\r\n\r\nimport { useExternalScript } from './useExternalScript'\r\nimport { DOM_ID, GOOGLE_API_URL } from './constants'\r\nimport {\r\n  GoogleUser,\r\n  HookConfig,\r\n  HookState,\r\n  HookReturnValue,\r\n  TokenObj,\r\n} from './types'\r\n\r\nexport type GoogleLoginHookReturnValue = HookReturnValue\r\n\r\n/**\r\n * Retrieves basic profile information for a given user.\r\n * @private\r\n *\r\n * @param user - `GoogleUser` instance to get basic info on.\r\n */\r\nconst getAdditionalUserData = (\r\n  user: GoogleUser,\r\n  fetchBasicProfile: boolean\r\n) => {\r\n  const authResponse = user.getAuthResponse()\r\n\r\n  user.tokenObj = authResponse\r\n  user.tokenId = authResponse.id_token\r\n  user.accessToken = authResponse.access_token\r\n  user.expiresAt = authResponse.expires_at\r\n\r\n  if (!fetchBasicProfile) return\r\n\r\n  const basicProfile = user.getBasicProfile()\r\n\r\n  user.googleId = basicProfile.getId()\r\n  user.profileObj = {\r\n    googleId: basicProfile.getId(),\r\n    imageUrl: basicProfile.getImageUrl(),\r\n    email: basicProfile.getEmail(),\r\n    name: basicProfile.getName(),\r\n    givenName: basicProfile.getGivenName(),\r\n    familyName: basicProfile.getFamilyName(),\r\n  }\r\n}\r\n\r\n/**\r\n * React hook for working with the google oAuth client library.\r\n *\r\n * @param config - The configuration for your Google authentication flow.\r\n *\r\n * @returns The `GoogleUser` instance with properties to work with Google\r\n * client authentication.\r\n */\r\nexport const useGoogleLogin = ({\r\n  clientId,\r\n  hostedDomain,\r\n  redirectUri,\r\n  scope = 'profile email openid',\r\n  cookiePolicy = 'single_host_origin',\r\n  fetchBasicProfile = true,\r\n  uxMode = 'popup',\r\n  persist = true,\r\n}: HookConfig): HookReturnValue => {\r\n  if (!clientId) throw new Error('clientId is required.')\r\n\r\n  const [state, setState] = useState<HookState>({\r\n    googleUser: undefined,\r\n    auth2: undefined,\r\n    isSignedIn: false,\r\n    isInitialized: false,\r\n  })\r\n  const latestAccessTokenRef = useRef<string | undefined>(undefined)\r\n  const latestExpiresAtRef = useRef<number | undefined>(undefined)\r\n\r\n  /**\r\n   * Attempts to sign in a user with Google's oAuth2 client.\r\n   * @public\r\n   *\r\n   * @param options - Configutation parameters for GoogleAuth.signIn()\r\n   * @returns The GoogleUser instance for the signed in user.\r\n   */\r\n  const signIn = async (\r\n    options?: gapi.auth2.SigninOptions\r\n  ): Promise<GoogleUser | undefined> => {\r\n    const auth2 = window.gapi.auth2.getAuthInstance()\r\n\r\n    try {\r\n      const googleUser = await auth2.signIn(options)\r\n      getAdditionalUserData(googleUser, fetchBasicProfile)\r\n\r\n      return googleUser\r\n    } catch (err) {\r\n      if (__DEV__)\r\n        console.error('Received error when signing in: ' + err?.details)\r\n      return\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Signs out and disconnects the oAuth2 client. Sets `googleUser` to undefined.\r\n   * @public\r\n   *\r\n   * @returns `true` if successful, `false` otherwise.\r\n   */\r\n  const signOut = async (): Promise<boolean> => {\r\n    const auth2 = window.gapi.auth2.getAuthInstance()\r\n\r\n    if (!auth2) return false\r\n\r\n    await auth2.signOut()\r\n    auth2.disconnect()\r\n\r\n    return true\r\n  }\r\n\r\n  /**\r\n   * Attempts to get permission from the user to access the specified `scopes` offline.\r\n   * If the user grants access, this function will return the `authorizationCode` that\r\n   * can be exchanged for a `refreshToken` on your own server or backend service.\r\n   * @public\r\n   *\r\n   * @remarks\r\n   * You must sign in a user with this function in order to retain access for longer\r\n   * than 1 hour.\r\n   *\r\n   * @param options - Configuration options for granting offline access.\r\n   * @returns The authorization `code` if permission was granted, `undefined` otherwise.\r\n   */\r\n  const grantOfflineAccess = async (\r\n    options?: gapi.auth2.OfflineAccessOptions\r\n  ): Promise<string | undefined> => {\r\n    const auth2 = window.gapi.auth2.getAuthInstance()\r\n\r\n    try {\r\n      const { code } = await auth2.grantOfflineAccess(options)\r\n\r\n      return code\r\n    } catch (err) {\r\n      if (__DEV__)\r\n        console.error(\r\n          'Received error when granting offline access: ' + err?.details\r\n        )\r\n      return\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Refreshes the current logged in user's `accessToken`.\r\n   *\r\n   * @remarks\r\n   * To use this function, the user must have signed in via `grantOfflineAccess`.\r\n   *\r\n   * @returns An object containing the new `accessToken` and its corresponding\r\n   * `expiresAt`.\r\n   */\r\n  const refreshUser = async (): Promise<TokenObj | undefined> => {\r\n    try {\r\n      const auth2 = window.gapi.auth2.getAuthInstance()\r\n      const googleUser = auth2.currentUser.get()\r\n\r\n      const tokenObj = await googleUser?.reloadAuthResponse()\r\n      if (!tokenObj) {\r\n        if (__DEV__)\r\n          console.error('Something went wrong refreshing the current user.')\r\n\r\n        return\r\n      }\r\n\r\n      latestAccessTokenRef.current = tokenObj.access_token\r\n      latestExpiresAtRef.current = tokenObj.expires_at\r\n\r\n      return {\r\n        accessToken: tokenObj.access_token,\r\n        expiresAt: tokenObj.expires_at,\r\n      }\r\n    } catch (err) {\r\n      if (__DEV__)\r\n        console.error('Received error when refreshing tokens: ' + err?.details)\r\n      return\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Callback function passed to Google's auth listener. This is the primary\r\n   * mechanism to keep the hook's state/return values in sync with Google's\r\n   * window `gapi` objects. All stateful logic **should** be performed in\r\n   * here.\r\n   * @private\r\n   *\r\n   * @remarks\r\n   * Due to the way closures work, we cannot access `state` directly\r\n   * in this function. (yay stale closures) Normally we'd instantiate and\r\n   * disconnect the listener on every render so we have the correct `state`\r\n   * values but Google doesn't provide a way to disconnect their listener. Go figure.\r\n   *\r\n   * This function **also** may not be called with the most up-to-date `GoogleUser`.\r\n   * Google decided that `reloadAuthResponse` will invoke this listener, but not\r\n   * actually provide a `googleUser` object with the most up-to-date tokens.\r\n   * In most auth change scenarios this isn't an issue except when refreshing\r\n   * with `refreshUser`.\r\n   *\r\n   * To remedy this, we need to keep a ref that tracks the latest `accessToken`\r\n   * and `expiresAt` values whenever we refresh, and use those instead when they're\r\n   * available since they'll contain the up-to-date values.\r\n   *\r\n   * It's worth noting that we could just use the callback version `setState` here,\r\n   * and update state in `refreshUser`, but this causes causes an additional re-render\r\n   * by setting state twice. React's batching **could* help here, but it is pretty\r\n   * un-deterministic and in my testing wouldn't kick in this particular case.\r\n   *\r\n   * @param googleUser GoogleUser object from the `currentUser` property.\r\n   */\r\n  const handleAuthChange = (googleUser: GoogleUser) => {\r\n    const isSignedIn = googleUser.isSignedIn()\r\n    const auth2 = window.gapi.auth2.getAuthInstance()\r\n\r\n    // If `tokenId` is present, we've already performed this step so skip it.\r\n    if (isSignedIn && !googleUser.tokenId)\r\n      getAdditionalUserData(googleUser, fetchBasicProfile)\r\n\r\n    setState({\r\n      auth2,\r\n      googleUser: isSignedIn\r\n        ? {\r\n            ...googleUser,\r\n            accessToken: latestAccessTokenRef.current ?? googleUser.accessToken,\r\n            expiresAt: latestExpiresAtRef.current ?? googleUser.expiresAt,\r\n            tokenObj: {\r\n              ...(googleUser.tokenObj as gapi.auth2.AuthResponse),\r\n              access_token:\r\n                latestAccessTokenRef.current ??\r\n                googleUser.tokenObj!.access_token,\r\n              expires_at:\r\n                latestExpiresAtRef.current ?? googleUser.tokenObj!.expires_at,\r\n            },\r\n          }\r\n        : undefined,\r\n      isSignedIn,\r\n      isInitialized: true,\r\n    })\r\n  }\r\n\r\n  useExternalScript(DOM_ID, GOOGLE_API_URL, () => {\r\n    const config: gapi.auth2.ClientConfig = {\r\n      client_id: clientId,\r\n      cookie_policy: cookiePolicy,\r\n      hosted_domain: hostedDomain,\r\n      fetch_basic_profile: fetchBasicProfile,\r\n      ux_mode: uxMode,\r\n      redirect_uri: redirectUri,\r\n      scope,\r\n    }\r\n\r\n    /**\r\n     * According to Google's documentation:\r\n     *\r\n     * Warning: do not call Promise.resolve() or similar with the result of gapi.auth2.init().\r\n     * The GoogleAuth object returned implements the `then()` method which resolves with itself.\r\n     * As a result, `Promise.resolve()` or `await` will cause infinite recursion.\r\n     */\r\n    const handleLoad = () => {\r\n      window.gapi.auth2.init(config).then(auth2 => {\r\n        const googleUser = auth2.currentUser.get()\r\n        const isSignedIn = googleUser.isSignedIn()\r\n        auth2.currentUser.listen(handleAuthChange)\r\n\r\n        if (!persist) {\r\n          signOut()\r\n          return\r\n        }\r\n\r\n        if (isSignedIn) getAdditionalUserData(googleUser, fetchBasicProfile)\r\n        setState({ googleUser, auth2, isSignedIn, isInitialized: true })\r\n      })\r\n    }\r\n\r\n    window.gapi.load('auth2', handleLoad)\r\n  })\r\n\r\n  return {\r\n    ...state,\r\n    signIn,\r\n    signOut,\r\n    grantOfflineAccess,\r\n    refreshUser,\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}